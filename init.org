* Init
:PROPERTIES:
:tangle: ~/.emacs.d/init.el
:END:
#+BEGIN_SRC elisp :tangle "~/.emacs.d/init.el"
(add-to-list 'load-path "~/.emacs.d/settings/")
(add-to-list 'load-path "~/.emacs.d/plugins/")

(require 'package-management-settings)

(require 'interface-settings)

(require 'editing-settings)

(require 'programming-settings)

(require 'programming-language-settings)

(require 'reveal-settings)

(require 'magit-settings)

(require 'clean-buffers)

(require 'mix-format)

(require 'open-notes)

(require 'restclient-settings)

(require 'dockerfile-settings)

(require 'org-wiki-install)
#+END_SRC

* Package Management
:PROPERTIES:
:tangle: ~/.emacs.d/settings/package-management-settings.el
:END:
** Melpa, marmalade

Milkypostman’s Emacs Lisp Package Archive - https://melpa.org/#/

Adding ~melpa stable~ to avoid conflicts.

#+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes

(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list
   'package-archives
   '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") t)
  (package-initialize))

#+END_SRC

** Use-package

~Use-package~ is a magic package that allow us to configure packages
and ensure to download them before configuring. JUST INSTALL IT DUDE!

https://github.com/jwiegley/use-package

#+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes

(unless (featurep 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  )

#+END_SRC

** Backup files

Backup `~` ended files in ~.emacs.d/backup/~.

#+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes

(setq make-backup-files nil) ;; Hello GIT

(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))

#+END_SRC

** Provide
Provide *package-management-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes
(provide 'package-management-settings)
#+END_SRC

* Interface
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/interface-settings.el
:END:
** Session

This let us save buffers from one session to another, but I personally
don't use it so we're gonna comment this by now.

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
;; (desktop-save-mode 1)
#+END_SRC

** Emacs bars

Cleaner interface, cleaner life.

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes

(tooltip-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

#+END_SRC

** Theme

/Moe/ does not rule anymore :/
/gruvbox/ does not rule anymore :/

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes

  ;; (use-package moe-theme
  ;;   :ensure t
  ;;   :config (load-theme 'moe-dark t))

  ;; (use-package gruvbox-theme
  ;;   :ensure t
  ;;   :config (load-theme 'gruvbox-dark-hard t))

  (use-package rebecca-theme
    :ensure t
    :config (load-theme 'rebecca t))
#+END_SRC

** Doom modeline
A fancy and fast mode-line which was from DOOM Emacs, but it's more
powerful and much faster. [[https://github.com/seagle0128/doom-modeline][Source]]

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config (setq doom-modeline-height 10))
#+END_SRC

** Window movement

I wanted a symbol in the left hand so I con move with *<symbol> +
<arrow>*, I use Dvorak as a keyboard distribution so...

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes

(use-package windmove
  :bind (("C-. C-c" . windmove-up)
         ("C-. C-h" . windmove-left)
         ("C-. C-n" . windmove-right)
         ("C-. C-t" . windmove-down))
  )
#+END_SRC

** Helm rules!

I personally LOOOVE helm

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
;; By @rockneurotiko
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
          helm-recentf-fuzzy-match              t
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t
          helm-M-x-fuzzy-match t)  ;; optional fuzzy matching for helm-M-x
    (helm-mode))
  :config
  (progn
    ;; rebind tab to run persistent action
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    ;; make TAB works in terminal
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
    ;; list actions using C-z
    (define-key helm-map (kbd "C-z")  'helm-select-action))
  :bind (("C-x C-f" . helm-find-files)
         ("C-x C-b" . helm-buffers-list)
         ("C-x b" . helm-mini)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-h a" . helm-apropos)
         ("C-x c o" . helm-occur)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c SPC" . helm-all-mark-rings)
         ("C-c h g" . helm-google-suggest)))

(ido-mode -1)

(use-package helm-descbinds
  :ensure t
  :bind (("C-h b" . helm-descbinds)
         ("C-h w" . helm-descbinds)))

(use-package helm-swoop
  ;; :disabled t
  :ensure t
  :bind (("M-i" . helm-swoop)
         ("M-I" . helm-swoop-back-to-last-point)
         ("C-c M-i" . helm-multi-swoop)
         ("C-x M-i" . helm-multi-swoop-all)))

(use-package ace-jump-helm-line
  ;; :disabled t
  :ensure t
  :commands helm-mode
  :init (define-key helm-map (kbd "C-'") 'ace-jump-helm-line))


(defun set-helm-swoop ()
  ;; Change the keybinds to whatever you like :)
  )


(defun set-helm-ace-jump ()
  )
#+END_SRC

** Rainbow
Rainbow delimeters lets you see where starts and ends each pair of
parentheses painting them with different collors by pairs.

Rainbow mode lets you see hex colors in /.css/ files.

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
;; Rainbow delimeters
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  )

;; Rainbow mode
(use-package rainbow-mode
  :ensure t
  :mode "\\.css\\'"
  )
#+END_SRC

** Maximized

Start Emacs maximized

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Pretty dashboard

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
  ;; Remove initial buffer
  (setq inhibit-startup-screen t)

  (use-package projectile
    :ensure t)

  (use-package page-break-lines
    :ensure t)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner nil)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 5))))
#+END_SRC

** Emojify
Turn icons into REAL icons

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
  (use-package emojify
    :ensure t
    :config
    (add-hook 'after-init-hook #'global-emojify-mode))
#+END_SRC
** All the icons!
Needed for NeoTree :D

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** NeoTree
#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
  (use-package neotree
    :ensure t
    :config
    (global-set-key "\M-n" 'neotree-toggle)
    (setq neo-theme 'icons))
#+END_SRC

** Provide
Provide *interface-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
(provide 'interface-settings)
#+END_SRC

* Editing
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/editing-settings.el
:END:

** Flyspell

You may need the spanish dictionary, because... reasons. (/You'll have to wait until I figure out how to install it automatically/)

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
  ;; Multiple cursors
  (use-package flyspell
    :ensure t
    )
#+END_SRC

** Mutiple cursors

Just a lot of cursors at the same time.

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Multiple cursors
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this))
  )
#+END_SRC

** Pretty icons
Locating the cursor right after "->" and pressing ~Shift + Space~ transforms it into "→"

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
  (use-package xah-math-input
    :ensure t)
#+END_SRC

** Undo

Glorious undo with `C-z` and redoo with `C-S-z`.

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el
;; Undo
(use-package undo-tree
  :ensure t
  :init
  (defalias 'redo 'undo-tree-redo)
  :config
  (global-undo-tree-mode 1)
  (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "C-S-z") 'redo)
  )
#+END_SRC

** Indent buffer

Function made by @skgsergio that indents the whole buffer.

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Indent Fucking Whole Buffer (by github.com/skgsergio)
(defun iwb ()
  "Indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max))
  (message "Indent buffer: Done.")
  )

(global-set-key "\M-i" 'iwb)
#+END_SRC

** Key bind fill paragraph

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
(global-set-key "\M-q" 'fill-paragraph)
#+END_SRC

** Move text

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Move text
(use-package move-text
  :ensure t
  :config
  (global-set-key [(control shift up)]  'move-text-up)
  (global-set-key [(control shift down)]  'move-text-line-down)
  )
#+END_SRC

** Indent with spaces

INDENT WITH SPACES!!

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Don't indent with tabs ffs!
(setq-default indent-tabs-mode nil)
#+END_SRC

** White space clean up
Just before saving, erase the whitespaces left at the end of lines.

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Clean my file pl0x!
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

** Sudo edit
Edit with root user, open a file and execute ~M-x sudo-edit~

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
  (use-package sudo-edit
    :ensure t)
#+END_SRC

** Provide
Provide *editing-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
(provide 'editing-settings)
#+END_SRC

* Programming
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/programming-settings.el
:END:

** LSP
[[https://github.com/emacs-lsp/lsp-mode#installation][Language Server Protocol]] mode

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
  (use-package lsp-mode
    :hook (XXX-mode . lsp)
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package company-lsp :commands company-lsp)
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+END_SRC

** Rust
Rust mode

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
  (use-package rust-mode
    :ensure t
    :config (add-hook 'rust-mode-hook #'lsp))
#+END_SRC

** Latex
Auctex

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
  (use-package tex-mode
    :ensure auctex)
#+END_SRC

** Markdown
Markdown mode

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
  (use-package markdown-mode
    :ensure t)
#+END_SRC

** Yasnippets

Completion for all languages

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
;; Yasnippets
(use-package yasnippet
  :ensure t
  :init (yas-global-mode 1)
  :config
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
  )
#+END_SRC

** Smart Parens

Good stuff with parens (https://github.com/Fuco1/smartparens)

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
;; SmartParents
(use-package smartparens
  :ensure t
  :init (smartparens-global-mode t))
#+END_SRC

** Aggressive Indent

Indent everything

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
;; Aggressive indent
(use-package aggressive-indent
  :ensure t
  :init
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  (add-hook 'css-mode-hook #'aggressive-indent-mode)
  )
#+END_SRC

** Auto Complete

Well...

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
;; Auto complete
(use-package auto-complete
  :ensure t
  :config (ac-config-default))
#+END_SRC

** Flycheck

A lot of well...

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
;; Flycheck
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

** Provide

Providing *programming-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
(provide 'programming-settings)
#+END_SRC

* Languages
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/programming-language-settings.el
:END:

Concrete language settings

** Web

JavaScript, CSS, HTML ...

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  ;; php mode
  (use-package php-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.php[345]?\\'\\|\\.inc\\'" . php-mode)))

  ;; json mode
  (use-package json-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.json\\'\\|\\.jshintrc\\'" . json-mode)
    (setq js-indent-level 2)))

  ;; Web mode
  (use-package web-mode
    :ensure t

    :init
    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-css-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-enable-auto-pairing t)
      (setq web-mode-enable-css-colorization t)
      (setq web-mode-enable-current-element-highlight t)
      (setq web-mode-enable-current-column-highlight t)
      (setq web-mode-enable-auto-expanding t))

    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
    (add-hook 'web-mode-hook 'my-web-mode-hook)
    )

  ;; Emmet mode
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'web-mode-hook 'emmet-mode))

  ;; Node repl
  (use-package nodejs-repl
    :ensure t
    :config
    (defun my-jscallback ()
      (local-set-key (kbd "C-c C-e") 'nodejs-repl-send-buffer))

    (add-hook 'js-mode-hook 'my-jscallback))
#+END_SRC

** Node

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save))
    :config (setq tide-format-options '(:indentSize 2)))
#+END_SRC

** Terraform

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package terraform-mode
    :ensure t)
#+END_SRC

** JavaScript

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  ;;----------------------;
  ;;; Javascript & Web ;;;
  ;;----------------------;

  (defun load-tern ()
    (use-package tern
      :ensure t
      :diminish tern-mode
      :config
      (defun ternhook ()
        (tern-mode t)
        (auto-complete-mode))
      (add-hook 'js2-mode-hook 'ternhook)
      (add-hook 'web-mode-hook 'ternhook)
      (require 'tern-auto-complete)
      (tern-ac-setup))

    (defun delete-tern-process ()
      (interactive)
      (delete-process "Tern")))

  (defun js-flycheck ()
    (use-package flycheck
      :ensure t
      :diminish flycheck-mode
      :config
      (add-hook 'js-mode-hook 'flycheck-mode)
      (add-hook 'web-mode-hook 'flycheck-mode)
      (flycheck-add-mode 'javascript-jshint 'web-mode)
      (flycheck-add-mode 'html-tidy 'web-mode)))

  (defun use-js2 ()
    (use-package js2-mode
      :ensure t
      :init
      (setq js-indent-level 2)
      (setq js2-indent-level 2)
      (setq-default js2-basic-offset 2)
      (setq ac-js2-evaluate-calls t)
      (setq js2-highlight-level 3)
      :config
      (add-hook 'js2-mode-hook 'ac-js2-mode)
      (add-hook 'js2-mode-hook 'jasminejs-mode)
      (use-package js2-refactor
        :ensure t
        :config
        (add-hook 'js2-mode-hook #'js2-refactor-mode)
        (js2r-add-keybindings-with-prefix "C-c C-m"))

      (js2-imenu-extras-mode)
      (apply #'derived-mode-p '(org-mode web-mode))

      (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . js2-jsx-mode))

      (add-hook 'js2-post-parse-callbacks
                (lambda ()
                  (when (> (buffer-size) 0)
                    (let ((btext (replace-regexp-in-string
                                  ": *true" " "
                                  (replace-regexp-in-string "[\n\t ]+" " " (buffer-substring-no-properties 1 (buffer-size)) t t))))
                      (mapc (apply-partially 'add-to-list 'js2-additional-externs)
                            (split-string
                             (if (string-match "/\\* *global *\\(.*?\\) *\\*/" btext) (match-string-no-properties 1 btext) "")
                             " *, *" t))
                      )))))

    (use-package php-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.php[345]?\\'\\|\\.inc\\'" . php-mode)))

    (use-package json-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.json\\'\\|\\.jshintrc\\'" . json-mode)))

    (use-package jasminejs-mode
      :ensure t
      :diminish jasminejs-mode
      :config
      (add-hook 'jasminejs-mode-hook (lambda () (jasminejs-add-snippets-to-yas-snippet-dirs))))

    (use-package js2-refactor
      :ensure t
      :diminish js2-refactor-mode)

    (add-to-list 'auto-mode-alist
                 '("\\.p?html\\(\\.[a-z]\\{2\\}\\)?\\'" . html-mode)))

  (defun load-web-mode ()
    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-css-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (set-face-attribute 'web-mode-css-at-rule-face nil :foreground "Pink3")
      (setq web-mode-enable-auto-pairing t)
      (setq web-mode-enable-css-colorization t)
      (setq web-mode-enable-current-element-highlight t)
      (setq web-mode-enable-current-column-highlight t)
      (setq web-mode-enable-auto-expanding t))

    (use-package web-mode
      :ensure t
      :init
      (setq web-mode-content-types-alist
            '(("jsx" . "\\.js[x]?\\'")))
      :config
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
      (add-hook 'web-mode-hook  'my-web-mode-hook))
    )

  (use-package emmet-mode
    :ensure t
    :config
    (defun emmet-hook()
      (emmet-mode)
      (local-set-key (kbd "M-TAB") 'emmet-expand-line))
    ;; Auto-start on any markup modes
    (add-hook 'sgml-mode-hook 'emmet-hook)
    ;; enable Emmet's css abbreviation.
    (add-hook 'css-mode-hook  'emmet-hook))

  (use-package nodejs-repl
    :ensure t
    :config
    (defun my-jscallback ()
      (local-set-key (kbd "C-c C-e") 'nodejs-repl-send-buffer))

    (add-hook 'js-mode-hook 'my-jscallback))

  ;; set web content type to jsx in js files, this will solve the indent problem I mentioned in my first post.
  (setq web-mode-content-types-alist
        '(("jsx" . ".*\\.js\\'"))
        )

  ;; for flycheck work in web-mode
  (flycheck-add-mode 'javascript-eslint 'web-mode)
#+END_SRC

** Python

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
(package-initialize)
(use-package elpy
  :ensure t
  :config (elpy-enable)
)
#+END_SRC

** Scala

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package scala-mode
    :ensure t)

  (use-package sbt-mode
    :ensure t)
#+END_SRC
** Erlang

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package erlang
    :ensure t
    :config
    (setq erlang-indent-level 2))
#+END_SRC

** Elixir

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package alchemist
    :ensure t)

  ;; elixir-mode hook
  (add-hook 'elixir-mode-hook
            (lambda () (add-hook 'before-save-hook 'mix-format-before-save)))

  ;; yasnippets
  (use-package elixir-yasnippets
    :ensure t)
#+END_SRC

*** Mix Format
#+BEGIN_SRC elisp :tangle ./plugins/mix-format.el :mkdirp yes
  ;;; mix-format.el --- Emacs plugin to mix format Elixir files

  ;; Copyright (C) 2017 Anil Wadghule

  ;; Author: Anil Wadghule <anildigital@gmail.com>
  ;; URL: https://github.com/anildigital/mix-format

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 2, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;;; Commentary:

  ;; The mix-format function formats the elixir files with Elixir's `mix format`
  ;; command

  ;; e.g.
  ;;
  ;; (require 'mix-format)
  ;; M-x mix-format
  ;;

  (defcustom mixfmt-elixir "elixir"
    "Path to the Elixir interpreter."
    :type 'string
    :group 'mix-format)

  (defcustom mixfmt-mix "/usr/bin/mix"
    "Path to the 'mix' executable."
    :type 'string
    :group 'mix-format)

  (defcustom mixfmt-args nil
    "Additional arguments to 'mix format'"
    :type '(repeat string)
    :group 'mix-format)

  (defcustom mix-format-hook nil
    "Hook called by `mix-format'."
    :type 'hook
    :group 'mix-format)


  ;;; Code

  ;;;###autoload
  (defun mix-format-before-save ()
    "Add this to .emacs to run mix format on the current buffer when saving:
  \(add-hook 'before-save-hook 'mix-format-before-save).
  Note that this will cause ‘elixir-mode’ to get loaded the first time
  you save any file, kind of defeating the point of autoloading."

    (interactive)
    (when (eq major-mode 'elixir-mode) (mix-format)))


  (defun mixfmt--goto-line (line)
    (goto-char (point-min))
    (forward-line (1- line)))

  (defun mixfmt--delete-whole-line (&optional arg)
    "Delete the current line without putting it in the `kill-ring'.
  Derived from function `kill-whole-line'.  ARG is defined as for that
  function.
  Shamelessly stolen from go-mode (https://github.com/dominikh/go-mode.el)"
    (setq arg (or arg 1))
    (if (and (> arg 0)
             (eobp)
             (save-excursion (forward-visible-line 0) (eobp)))
        (signal 'end-of-buffer nil))
    (if (and (< arg 0)
             (bobp)
             (save-excursion (end-of-visible-line) (bobp)))
        (signal 'beginning-of-buffer nil))
    (cond ((zerop arg)
           (delete-region (progn (forward-visible-line 0) (point))
                          (progn (end-of-visible-line) (point))))
          ((< arg 0)
           (delete-region (progn (end-of-visible-line) (point))
                          (progn (forward-visible-line (1+ arg))
                                 (unless (bobp)
                                   (backward-char))
                                 (point))))
          (t
           (delete-region (progn (forward-visible-line 0) (point))
                          (progn (forward-visible-line arg) (point))))))

  (defun mixfmt--apply-rcs-patch (patch-buffer)
    "Apply an RCS-formatted diff from PATCH-BUFFER to the current buffer.
  Shamelessly stolen from go-mode (https://github.com/dominikh/go-mode.el)"

    (let ((target-buffer (current-buffer))
          ;; Relative offset between buffer line numbers and line numbers
          ;; in patch.
          ;;
          ;; Line numbers in the patch are based on the source file, so
          ;; we have to keep an offset when making changes to the
          ;; buffer.
          ;;
          ;; Appending lines decrements the offset (possibly making it
          ;; negative), deleting lines increments it. This order
          ;; simplifies the forward-line invocations.
          (line-offset 0))
      (save-excursion
        (with-current-buffer patch-buffer
          (goto-char (point-min))
          (while (not (eobp))
            (unless (looking-at "^\\([ad]\\)\\([0-9]+\\) \\([0-9]+\\)")
              (error "Invalid rcs patch or internal error in mixfmt--apply-rcs-patch"))
            (forward-line)
            (let ((action (match-string 1))
                  (from (string-to-number (match-string 2)))
                  (len  (string-to-number (match-string 3))))
              (cond
               ((equal action "a")
                (let ((start (point)))
                  (forward-line len)
                  (let ((text (buffer-substring start (point))))
                    (with-current-buffer target-buffer
                      (cl-decf line-offset len)
                      (goto-char (point-min))
                      (forward-line (- from len line-offset))
                      (insert text)))))
               ((equal action "d")
                (with-current-buffer target-buffer
                  (mixfmt--goto-line (- from line-offset))
                  (cl-incf line-offset len)
                  (mixfmt--delete-whole-line len)))
               (t
                (error "Invalid rcs patch or internal error in mixfmt--apply-rcs-patch"))))))))
    )

  ;;;###autoload
  (defun mix-format (&optional is-interactive)
    (interactive "p")

    (let ((outbuff (get-buffer-create "*mix-format-output*"))
          (errbuff (get-buffer-create "*mix-format-errors*"))
          (tmpfile (make-temp-file "mix-format" nil ".ex"))
          (our-mixfmt-args (list mixfmt-mix "format"))
          (output nil))

      (unwind-protect
          (save-restriction
            (with-current-buffer outbuff
              (erase-buffer))

            (with-current-buffer errbuff
              (setq buffer-read-only nil)
              (erase-buffer))

            (write-region nil nil tmpfile)

            (run-hooks 'mix-format-hook)

            (when mixfmt-args
              (setq our-mixfmt-args (append our-mixfmt-args mixfmt-args)))
            (setq our-mixfmt-args (append our-mixfmt-args (list tmpfile)))

            (if (zerop (apply #'call-process mixfmt-elixir nil errbuff nil our-mixfmt-args))
                (progn
                  (if (zerop (call-process-region (point-min) (point-max) "diff" nil outbuff nil "-n" "-" tmpfile))
                      (message "File is already formatted")
                    (progn
                      (mixfmt--apply-rcs-patch outbuff)
                      (message "mix format applied")))
                  (kill-buffer errbuff))

              (progn
                (with-current-buffer errbuff
                  (setq buffer-read-only t)
                  (ansi-color-apply-on-region (point-min) (point-max))
                  (special-mode))

                (if is-interactive
                    (display-buffer errbuff)
                  (message "mix-format failed: see %s" (buffer-name errbuff)))))

            (delete-file tmpfile)
            (kill-buffer outbuff)))))



  (provide 'mix-format)

  ;;; mix-format.el ends here
#+END_SRC

** Yaml

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package yaml-mode
    :ensure t)
#+END_SRC

** Angular 2
#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package ng2-mode
    :ensure t)
#+END_SRC

** Lua
#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package lua-mode
    :ensure t)
#+END_SRC

** TypeScript
#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package tide
    :ensure t
    :config
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      ;; company is an optional dependency. You have to
      ;; install it separately via package-install
      ;; `M-x package-install [ret] company`
      (company-mode +1))

    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)

    ;; formats the buffer before saving
    (add-hook 'before-save-hook 'tide-format-before-save)

    (add-hook 'typescript-mode-hook #'setup-tide-mode)
    )
#+END_SRC

** Elm
#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package elm-mode
    :ensure t)
#+END_SRC

** Haskell
#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package haskell-mode
    :ensure t)
#+END_SRC

** Nginx Config Files
#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package nginx-mode
    :ensure t)
#+END_SRC

** Ocaml
#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
  (use-package tuareg
    :ensure t)

  (use-package utop
    :ensure t)

  ;; Add the opam lisp dir to the emacs load path
  (add-to-list
   'load-path
   (replace-regexp-in-string
    "\n" "/share/emacs/site-lisp"
    (shell-command-to-string "opam config var prefix")))

  ;; Automatically load utop.el
  (autoload 'utop "utop" "Toplevel for OCaml" t)

  ;; Use the opam installed utop
  (setq utop-command "opam config exec -- utop -emacs")

  (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
  (add-hook 'tuareg-mode-hook 'utop-minor-mode)
#+END_SRC

** Provide

Providing *programming-language-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
(provide 'programming-language-settings)
#+END_SRC

* Reveal
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/reveal-settings.el
:END:

Make beautiful slides with ox-reveal

** Settings
#+BEGIN_SRC elisp :tangle ./settings/reveal-settings.el :mkdirp yes
  (use-package org
    :ensure t)

  (defun install-ox-reveal()
    (shell-command "cd ~/.emacs.d && ./install-ox-reveal.sh")
    (require 'ox-reveal)
    (setq org-reveal-root "file:///home/ironjanowar/reveal.js"))

  (defun prompt-ox-reveal-installation()
    (interactive)
    (if (yes-or-no-p "install-ox-reveal.sh will be executed, do you agree? ")
        (install-ox-reveal) nil))

  (add-to-list 'load-path "~/.emacs.d/plugins/org-reveal/")

  (if (file-exists-p "~/.emacs.d/plugins/org-reveal/ox-reveal.el")
      nil
    (prompt-ox-reveal-installation))

  (use-package htmlize
    :ensure t)
#+END_SRC

** Provide

Providing *reveal-settings.el*
#+BEGIN_SRC elisp :tangle ./settings/reveal-settings.el :mkdirp yes
(provide 'reveal-settings)
#+END_SRC

* Magit
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/magit-settings.el
:END:

Magit is a lovely mode for git.

** Settings

#+BEGIN_SRC elisp :tangle ./settings/magit-settings.el :mkdirp yes
  ;; Magit
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status)
           ("C-x M-g" . magit-dispatch-popup))
    )

  ;; Git Flow
  (use-package magit-gitflow
    :ensure t
    :init
    (setq magit-gitflow-popup-key ".")
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
#+END_SRC

** Provide

Providing *magit-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/magit-settings.el :mkdirp yes
(provide 'magit-settings)
#+END_SRC

* Clean Buffers

Kill all buffers

#+BEGIN_SRC elisp :tangle ./plugins/clean-buffers.el :mkdirp yesn
(defun kill-buffers()
  (let (buffer buffers)
    (setq buffers (buffer-list))
    (dotimes (i (length buffers))
      (setq buffer (pop buffers))
      (if (not (string-equal (buffer-name buffer) "*scratch*")) (kill-buffer buffer) nil))))

(defun clean-buffers()
       (interactive)
       (if (yes-or-no-p "Do you really want to clean all buffers? ")
           (kill-buffers) nil))

(global-set-key (kbd "C-x C-k") 'clean-buffers)

(provide 'clean-buffers)
#+END_SRC

* Rest Client

#+BEGIN_SRC elisp :tangle ./plugins/restclient-settings.el :mkdirp yes
  (use-package restclient
    :ensure t)

  (provide 'restclient-settings)
#+END_SRC

* Dockerfiles
#+BEGIN_SRC elisp :tangle ./plugins/dockerfile-settings.el :mkdirp yes
  (use-package dockerfile-mode
    :ensure t)

  (provide 'dockerfile-settings)
#+END_SRC

* Open Notes
Opens a buffer to take notes

By: [[https://gist.github.com/prathik][@prathik]]

#+BEGIN_SRC elisp :tangle ./plugins/open-notes.el :mkdirp yes
  (defun new-scratch-buffer-new-window ()
    "Create a new scratch buffer in a
    new window. I generally take a lot of notes
    in different topics. For each new topic hit
    C-c C-s and start taking your notes.
    Most of these notes don't need to be
    saved but are used like quick post it
    notes."
    (interactive)
    (let (($buf (generate-new-buffer "notes")))
      (split-window-right)
      (other-window 1)
      (balance-windows)
      (switch-to-buffer $buf)
      (org-mode)
      (insert "# Notes\n\n")
      (set-input-method 'spanish-postfix)
      $buf
      ))

  (global-set-key
   (kbd "C-c C-n")
   'new-scratch-buffer-new-window
   )

  (provide 'open-notes)
#+END_SRC

* Org Wiki
Awesome desktop wiki by [[https://github.com/caiorss/org-wiki][@caiorss]]

#+BEGIN_SRC elisp :tangle ./plugins/org-wiki-install.el :mkdirp yes
  (add-to-list 'load-path "~/.emacs.d/plugins/org-wiki/")

  (defun install-org-wiki()
    (shell-command "cd ~/.emacs.d && ./install-org-wiki.sh"))

  (defun prompt-installation()
    (interactive)
    (if (yes-or-no-p "install-org-wiki.sh will be executed, do you agree? ")
        (install-org-wiki) nil))

  (if (file-exists-p "~/.emacs.d/plugins/org-wiki/org-wiki.el")
      nil
    (prompt-installation))

  (require 'org-wiki)

  (setq org-wiki-location '"~/org/wiki/")
  (global-set-key (kbd "C-c w") 'org-wiki-index)

  (provide 'org-wiki-install)
#+END_SRC
